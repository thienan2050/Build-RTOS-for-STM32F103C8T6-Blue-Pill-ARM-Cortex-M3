


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             | .text|, CODE, READONLY, ALIGN
 = 2 
                                                            ; Code area
    2 00000000                 THUMB                        ; Thumb directive
    3 00000000                 PRESERVE8
    4 00000000                 EXTERN           currentPt
    5 00000000                 EXPORT           SysTick_Handler
    6 00000000                 EXPORT           osSchedulerLaunch
    7 00000000                 IMPORT           osSchedulerRoundRobin
    8 00000000         
    9 00000000         SysTick_Handler                      ; Periodic interrup
                                                            t, the proceesor wi
                                                            ll automatically sa
                                                            ves 8 Registers to 
                                                            TCB_STACK[x] ( R0, 
                                                            R1, R2, R3, R12, LR
                                                            , PC, xPSR ), so we
                                                             have to save the r
                                                            emaining registers 
                                                            onto TCB_STACK[x].
   10 00000000 B672            CPSID            I           ; Disable interrupt
                                                            
   11 00000002 E92D 0FF0       PUSH             {R4 - R11}  ; Save R4, R5, R6, 
                                                            R7, R8, R9, R10, R1
                                                            1 onto TCB_STACK[x]
                                                            .
   12 00000006 480F            LDR              R0, =currentPt ;   ; R0 = curre
                                                            ntPt(=&tcb[x])
   13 00000008 6801            LDR              R1, [R0, #0] ; R1 = R0(=current
                                                            Pt)->stackPt [Numbe
                                                            r #0 takes us to th
                                                            e first entry of TC
                                                            B]
   14 0000000A F8C1 D000       STR              SP, [R1]    ; R1(=currentPt->st
                                                            ackPt) = SP
   15 0000000E         
   16 0000000E B501            PUSH             {R0, LR}
   17 00000010 F7FF FFFE       BL               osSchedulerRoundRobin
   18 00000014 E8BD 4001       POP              {R0, LR}
   19 00000018 6801            LDR              R1, [R0]    ; R1 = currentPt, i
                                                            .e New thread
   20 0000001A F8D1 D000       LDR              SP, [R1]    ; SP = currentPt->s
                                                            tackPt
   21 0000001E E8BD 0FF0       POP              {R4 - R11}  ; Restore R4 - R11 
                                                            from TCB_STACK[x] t
                                                            o Special Registers
                                                            
   22 00000022 B662            CPSIE            I           ; Enable interrupt
   23 00000024 4770            BX               LR          ; Causes a branch t
                                                            o the address conta
                                                            ined in LR and exch
                                                            anges the instructi
                                                            on set.
   24 00000026         
   25 00000026         osSchedulerLaunch
   26 00000026 4807            LDR              R0, =currentPt ; R0 = currentPt
                                                            (&tcb[0]).
   27 00000028 6802            LDR              R2, [R0, #0] ; R2 = R0 = curren
                                                            tPt(&tcb[0]).



ARM Macro Assembler    Page 2 


   28 0000002A F8D2 D000       LDR              SP, [R2, #0] ; SP = R2(&tcb[0])
                                                            ->stackPt, now SP p
                                                            oints to TCB_STACK[
                                                            0].
   29 0000002E E8BD 0FF0       POP              {R4 - R11}  ; Get R4 - R11 from
                                                             TCB_STACK[0] to Sp
                                                            ecial Registers.
   30 00000032 BC0F            POP              {R0 - R3}   ; Get R0 - R3  from
                                                             TCB_STACK[0] to Sp
                                                            ecial Registers.
   31 00000034 F85D CB04       POP              {R12}       ; Get R12 from TCB_
                                                            STACK[0] to Special
                                                             Register.
   32 00000038 B001            ADD              SP, SP, #4  ; The next register
                                                             in TCB_STACK[0] is
                                                              SP, we will skip 
                                                            it and move to the 
                                                            next register - LR.
                                                            
   33 0000003A F85D EB04       POP              {LR}        ; Load LR from TCB_
                                                            STACK[0] into Speci
                                                            al Register LR. LR 
                                                            contains address of
                                                             function LED1_Task
                                                            .
   34 0000003E B001            ADD              SP, SP, #4  ; Skip xPSR. Now SP
                                                             points at the lowe
                                                            st of our TCB_STACK
                                                            [0]. 
   35 00000040 B662            CPSIE            I           ; Enable Systick in
                                                            terrupt as we disab
                                                            led it before. 
   36 00000042 4770            BX               LR          ; Causes a branch t
                                                            o the address conta
                                                            ined in LR and exch
                                                            anges the instructi
                                                            on set.
   37 00000044         
   38 00000044                 ALIGN
   39 00000044                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=the_periodic_scheduler\oskernel_1.d -othe_periodic_scheduler\osker
nel_1.o -I"C:\Users\thien\Desktop\Build-RTOS-for-STM32F103C8T6-Blue-Pill-ARM-Co
rtex-M3\18 The Periodic Scheduler\MDK-ARM\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\
4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Inclu
de --predefine="__UVISION_VERSION SETA 517" --predefine="_RTE_ SETA 1" --predef
ine="STM32F10X_MD SETA 1" --list=oskernel.lst ..\osKernel\osKernel.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

 .text 00000000

Symbol:  .text
   Definitions
      At line 1 in file ..\osKernel\osKernel.s
   Uses
      None
Comment:  .text unused
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 9 in file ..\osKernel\osKernel.s
   Uses
      At line 5 in file ..\osKernel\osKernel.s
Comment: SysTick_Handler used once
osSchedulerLaunch 00000026

Symbol: osSchedulerLaunch
   Definitions
      At line 25 in file ..\osKernel\osKernel.s
   Uses
      At line 6 in file ..\osKernel\osKernel.s
Comment: osSchedulerLaunch used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

currentPt 00000000

Symbol: currentPt
   Definitions
      At line 4 in file ..\osKernel\osKernel.s
   Uses
      At line 12 in file ..\osKernel\osKernel.s
      At line 26 in file ..\osKernel\osKernel.s

osSchedulerRoundRobin 00000000

Symbol: osSchedulerRoundRobin
   Definitions
      At line 7 in file ..\osKernel\osKernel.s
   Uses
      At line 17 in file ..\osKernel\osKernel.s
Comment: osSchedulerRoundRobin used once
2 symbols
340 symbols in table
